// <auto-generated />
using System;
using Emeet.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Emeet.Infrastructure.Migrations
{
    [DbContext(typeof(EmeetDbContext))]
    [Migration("20250514171415_Update_Db")]
    partial class Update_Db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Emeet.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("expert_id");

                    b.Property<string>("LinkMeet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("link_meet");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.HasIndex("UserId");

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Expert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("experience");

                    b.Property<decimal>("PricePerMinute")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price_per_minute");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("rate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("status");

                    b.Property<int>("TotalPreview")
                        .HasColumnType("int")
                        .HasColumnName("total_preview");

                    b.Property<decimal>("TotalRate")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_rate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("expert", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.ExpertCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("expert_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExpertId");

                    b.ToTable("expert_category", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ExpertId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.OTP", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_time");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<double?>("ExpireTime")
                        .HasColumnType("float")
                        .HasColumnName("expire_time");

                    b.Property<string>("OtpKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("otp_key");

                    b.HasKey("Id");

                    b.ToTable("otp", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("amount");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("appointment_id");

                    b.Property<DateTime>("DatePaid")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_paid");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("DayOfMonth")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("day_of_month");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("expert_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.ToTable("schedule", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.StaticFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<Guid>("ExpertId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("expert_id");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("link");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ExpertId");

                    b.ToTable("static_file", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_create");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_updated");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsExpert")
                        .HasColumnType("bit")
                        .HasColumnName("is_expert");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("datetime2")
                        .HasColumnName("refresh_token_expiry");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Emeet.Domain.Entities.Expert", "Expert")
                        .WithMany("Appointments")
                        .HasForeignKey("ExpertId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_expert");

                    b.HasOne("Emeet.Domain.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_appointment_user");

                    b.Navigation("Expert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Expert", b =>
                {
                    b.HasOne("Emeet.Domain.Entities.User", "User")
                        .WithMany("Experts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_user_expert");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.ExpertCategory", b =>
                {
                    b.HasOne("Emeet.Domain.Entities.Category", "Category")
                        .WithMany("ExpertCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_expert_category_category");

                    b.HasOne("Emeet.Domain.Entities.Expert", "Expert")
                        .WithMany("ExpertCategories")
                        .HasForeignKey("ExpertId")
                        .IsRequired()
                        .HasConstraintName("FK_expert_category_expert");

                    b.Navigation("Category");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Emeet.Domain.Entities.Appointment", "Appointment")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_feedback_appointment");

                    b.HasOne("Emeet.Domain.Entities.Expert", "Expert")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ExpertId")
                        .IsRequired()
                        .HasConstraintName("FK_feedback_expert");

                    b.Navigation("Appointment");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Emeet.Domain.Entities.Appointment", "Appointment")
                        .WithMany("Payments")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_payment_appointment");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Emeet.Domain.Entities.Expert", "Expert")
                        .WithMany("Schedules")
                        .HasForeignKey("ExpertId")
                        .IsRequired()
                        .HasConstraintName("FK_schedule_expert");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.StaticFile", b =>
                {
                    b.HasOne("Emeet.Domain.Entities.Expert", "Expert")
                        .WithMany("StaticFiles")
                        .HasForeignKey("ExpertId")
                        .IsRequired()
                        .HasConstraintName("FK_static_file_expert");

                    b.Navigation("Expert");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Category", b =>
                {
                    b.Navigation("ExpertCategories");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.Expert", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ExpertCategories");

                    b.Navigation("Feedbacks");

                    b.Navigation("Schedules");

                    b.Navigation("StaticFiles");
                });

            modelBuilder.Entity("Emeet.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Experts");
                });
#pragma warning restore 612, 618
        }
    }
}
